AutoGen Definitions dummy;
class = {
  cp-id     = 'class_m_c_p';
  cp-name   = 'MCP';
  cp-section = {
    sec-kind = 'public-func';
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1gadb7256b4dbca399d6c917c0ddf44367c';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setup';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'i2c';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0x20
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'io';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
GPIO_OUTPUT
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '60';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Starts the MCP23008.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Starts the MCP23008 and sets the default values. 
@param i2c I2C address (0x20 ~ 0x27) - default 0x20
@param io  If GPIO_OUTPUT (0), all  GPIO PINS will configured to output
           If GPIO_INPUT  (255), all GPIO PINS will configured to input  
<br>
           You also can use a bitmask to configure some pins for input and other pins for output. 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga9d0c5ff49456ba2016efb6dc56ddb1cd';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setGPIOS';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '61';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets a value to the GPIO Register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
A direct way to set a given value to deal with the GPIOs pins.
@param value (8 bits)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga490e4a6820e3a2e0dd86c1a7aa5bb920';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getRegister';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reg';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '62';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Gets the corrent register information.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Gets the current register content. 
@param reg  (0x00 ~ 0xA) see MCP23008 registers documentation 
@return uint8_t current register value
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1gaba8f4501efb5a9772a5b7ec7a428ac4d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setRegister';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'reg';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'value';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '63';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets a value to a given register.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets a given 8 bit value to a given register.  
<br>
@param reg   (0x00 ~ 0xA) see MCP23008 registers documentation 
@param value value (8 bits)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga0164b9f8c7ec58465d00b5761b5d4e0d';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'turnGpioOn';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '64';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turns a given GPIO port on (high level)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets a given GPIO pin high
@param gpio the GPIO/PIN number (0-7)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga09893717b6ae4b71455ea2a3657a88eb';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'turnGpioOff';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '65';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turns a given GPIO port off (low level)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Sets a given GPIO pin to low
@param gpio the GPIO/PIN number (0-7)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1gad504a9ca7a1af1c98cabcf2f7c7a88c8';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'pullUpGpioOn';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '66';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turns intenal pull up resistor ON  to  a given GPIO PIN (high level)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Activates the pull up resistor to a given GPIO pin
@param gpio the GPIO/PIN number (0-7)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1gab669a85d10e0c8372babed1c49ffb5ed';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'pullUpGpioOff';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpio';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '67';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Turns intenal pull up resistor OFF  to a given GPIO PIN (low level)
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
Deactivates the pull up resistor to a given GPIO pin
@param gpio the GPIO/PIN number (0-7)
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1gad5ecb8741304bbaee9e1626f57efcdea';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setIoCon';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'INTPOL';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'ODR';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'HAEN';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'DISSLW';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'SEQOP';
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '68';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the IO Configurarion gerister.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The IOCON register contains several bits for configuring the device:


TheSequentialOperation(SEQOP)controlsthe incrementing function of the address pointer. 


If the address pointer is disabled, the address pointer does not automatically increment after each byte is clocked during a serial transfer. 


This feature is useful when it is desired to continuously poll (read) or modify (write) a register.


TheSlewRate(DISSLW)bitcontrolstheslew rate function on the SDA pin. If enabled, the SDA slew rate will be controlled when driving from a high to a low.


TheHardwareAddressEnable(HAEN)controlbit enables/disables the hardware address pins (A1, A0) on the MCP23S08. This bit is not used on the MCP23008. The address pins are always enabled on the MCP23008.


TheOpen-Drain(ODR)controlbitenables/ disables the INT pin for open-drain configuration.


TheInterruptPolarity(INTPOL)controlbitsets the polarity of the INT pin. This bit is functional only when the ODR bit is cleared, configuring the INT pin as active push-pull.

@param INTPOL  This bit sets the polarity of the INT output pin. 1= Active-high. 0 = Active - low.
@param ODR     This bit configures the INT pin as an open-drain output. 1 = Open-drain. 0 = Active driver.
@param HAEN    Hardware Address Enable bit (MCP23S08 only). 1 = Enables.
@param DISSLW  Slew Rate control bit for SDA output. 1= Slewratedisabled. 0= Slewrateenabled.
@param SEQOP   Sequential Operation mode bit. 1 = Sequential operation disabled, address pointer does not increment.
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga3595987c188c9d1adcb1a8739cc3a278';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'invertGpioPolarity';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '69';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Inverts the polarity of the <strong>all</strong> GPIO port bits.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The IPOL register allows the user to configure the polarity on the corresponding GPIO port bits.


If a bit is set, the corresponding GPIO register bit will reflect the inverted value on the pin.


Use the primitive setRegister(REG_IPOL, reg_value) if you ant to invert only a specific gpio.
@see setRegister
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga6acb6478e2baa56b4a2834306f7e1963';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'setInterrupt';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'polatity';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'openDrainOutput';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
0
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '70';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Configures the MCP23008 interrupt feature.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The INT output pin will be activated when an internal interrupt occurs. 


The interrupt block can be configured by the following registers: GPINTEN, DEFVAL, INTCON and IOCON(ODRandINPOL).


This method work on IOCON. 

@param polatity  sets the polarity of the INT output pin. 1 = Active-high; 0 = Active-low.
@param openDrainOutput configures the INT pin as an open-drain output. 1 = Open-drain output (overrides the INTPOL bit). 0 = Active driver output (INTPOL bit sets the polarity).
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1gac03586dc0fd4cb9ff2f4e49b84ec8f91';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
void
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'interruptGpioOn';
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'gpio';
      }; /*        sec-mem-param--param */
      sec-mem-param = {
        sec-mem-param-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
        sec-mem-param-declname = 'bitCompare';
        sec-mem-param-defval = <<_EnD_oF_dEf_TeXt_
1
_EnD_oF_dEf_TeXt_;
      }; /*        sec-mem-param--param */
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '71';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sets the interrupt-on-change feature to a given GPIO pin.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
The GPINTEN register controls the interrupt-on-change feature for each pin.


If a bit is set, the corresponding pin is enabled for interrupt-on-change. 


The DEFVAL and INTCON registers must also be configured if any pins are enabled for interrupt-on-change.


if you want to configure more than one GPIO at once, use the primitive  setRegister(REG_GPINTEN, reg);


If enabled (via GPINTEN and INTCON) to compare against the DEFVAL register, an opposite value on the associated pin will cause an interrupt to occur.

@param gpio GPIO / PIN you want to configure
@param bitCompare The default comparison bit value that should be configured in the DEFVAL register.  
<br>
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'function';
      sec-mem-id   = 'group__group01_1ga0cb2b67c45363a172323bf51f18b51fe';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'getGPIOS';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '79';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Return the current MCP GPIO pin levels.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_
@return uint8_t 
_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-section = {
    sec-kind = 'protected-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_m_c_p_1a661ef40042948051e9addd4891e66460';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'i2cAddress';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0x20
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '56';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'class_m_c_p_1accfcacc44509bb19a411856f91f4568a';
      sec-mem-virt = normal;
      sec-mem-prot = protected;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'gpios';
      sec-mem-initializer = <<_EnD_oF_dEf_TeXt_
= 0
_EnD_oF_dEf_TeXt_;
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '57';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
  cp-fileline  = '53';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* class */
union = {
  cp-id     = 'pu2clr__mcp23008_8h';
  cp-name   = 'mcp23008_ioncon';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1ae5d322d39d57feb79d8a77526daa6504';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
struct mcp23008_ioncon::__anonymous__
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'arg';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '48';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1abf64e04f118e35a8b46cbd537399d132';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'raw';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '49';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
  cp-fileline  = '38';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_
IOCON register structure - I/O EXPANDER CONFIGURATION REGISTER (ADDR 0x05)
_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_
The IOCON register contains several bits for configuring the device. 
_EnD_oF_dEf_TeXt_;
}; /* union */
struct = {
  cp-id     = 'pu2clr__mcp23008_8h';
  cp-name   = 'mcp23008_ioncon.arg';
  cp-section = {
    sec-kind = 'public-attrib';
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1a3651c40ccc4450f2fc89fa3139dedd5a';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY1';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '41';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unimplemented.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1aafb27e01639daf2cb27c7dfb3b336a62';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'INTPOL';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '42';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This bit sets the polarity of the INT output pin. 1= Active-high. 0 = Active - low.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1a8a5a2bf6fd2aa354a65fd964483c49e4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'ODR';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '43';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
This bit configures the INT pin as an open-drain output. 1 = Open-drain. 0 = Active driver.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1acd0fe1a1d03df910dfa4efab38dcd8f6';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'HAEN';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '44';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Hardware Address Enable bit (MCP23S08 only). 1 = Enables.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1af0b6983ddddd573a3116a9127c94a8db';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DISSLW';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '45';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Slew Rate control bit for SDA output. 1= Slewratedisabled. 0= Slewrateenabled.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1ad6d490ff4f554a6692997176fa9d34d4';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'SEQOP';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '46';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Sequential Operation mode bit. 1 = Sequential operation disabled, address pointer does not increment.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
    sec-member = {
      sec-mem-kind = 'variable';
      sec-mem-id   = 'pu2clr__mcp23008_8h_1abece94c62273dc7ecfabc565b76dbbe5';
      sec-mem-virt = normal;
      sec-mem-prot = public;
      sec-mem-type = <<_EnD_oF_dEf_TeXt_
uint8_t
_EnD_oF_dEf_TeXt_;
      sec-mem-name = 'DUMMY2';
      sec-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      sec-mem-desc-line = '47';
      sec-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Unimplemented.
_EnD_oF_dEf_TeXt_;
      sec-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* sec-member */
  }; /* cp-section */
  cp-filename  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
  cp-fileline  = '40';
  cp-briefdesc = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  cp-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* struct */
file = {
  file-id   = 'pu2clr__mcp23008_8cpp';
  file-name = 'pu2clr_mcp23008.cpp';
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.cpp';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
file = {
  file-id   = 'pu2clr__mcp23008_8h';
  file-name = 'pu2clr_mcp23008.h';
    define = {
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a5fc08d2f74765206202ac3721b7c7125';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_IODIR';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '18';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
Controls the direction of the data I/O. When  a  bit  is  set,  the  corresponding  pin  becomes  an input.  When  a  bit  is  clear,  the  corresponding  pin becomes an output.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1af770bc40e87878d08198ed10b0cce6b7';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_IPOL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x01
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '19';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The IPOL  register  allows  the  user  to  configure  the polarity on the corresponding GPIO port bits.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a575e0c713d36d9de6d81f6b746574a7b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_GPINTEN';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x02
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '20';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The GPINTEN register controls the interrupt-on-change feature for each pin.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1aa13bec64661c81668056f0b303c7794b';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_DEFVAL';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x03
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '21';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The default  comparison  value  is  configured  in  the DEFVAL register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1ad04ccdae4910c0e9e6f3fccee6868fde';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_INTCON';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x04
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '22';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The INTCON register controls how the associated pin value is compared for the interrupt-on-change feature.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a16a497cb509be41c4e6de44d707234b6';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_IOCON';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x05
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '23';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The IOCON register contains several bits for configuring the device. See method: setIoCon.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a50665a2700493ae6c1d69adcf454e786';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_GPPU';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x06
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '24';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The GPPU register controls the pull-up resistors for the port  pins.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1ad06a5aaaf1af27787cab7c132225ae76';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_INTF';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x07
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '25';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The INTF register reflects the interrupt condition on the port pins of any pin that is enabled for interrupts via the GPINTEN register.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a61b72d5a4d4d7d78ad51b523462fa445';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_INTCAP';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x08
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '26';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The INTCAP register captures the GPIO port value at the  time  the  interrupt  occurred.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1ab3fc35f8c61fd650971ec4e3329cabac';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_GPIO';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x09
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '27';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The GPIO  register  reflects  the  value  on  the  port.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a0964e829dee70fc23463ce4948486211';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'REG_OLAT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x0A
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '28';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_
The OLAT  register  provides  access  to  the  output latches.
_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a7be6a0cc9aa65da1d4ee5751b4085853';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPIO_INPUT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0xFF
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '30';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    define-member = {
      define-mem-kind = 'define';
      define-mem-id   = 'pu2clr__mcp23008_8h_1a0db9fe8a278e6ab7c5c6f14fe58e5eb1';
      define-mem-virt = normal;
      define-mem-prot = public;
      define-mem-name = 'GPIO_OUTPUT';
      define-mem-initializer = <<_EnD_oF_dEf_TeXt_
0x00
_EnD_oF_dEf_TeXt_;
      define-mem-desc-file = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
      define-mem-desc-line = '31';
      define-mem-briefdesc =    <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
      define-mem-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
    }; /* define-member */
    };
  file-full-name  = '/Users/rcaratti/Desenvolvimento/eu/Arduino/PU2CLR_MCP23008/pu2clr_mcp23008.h';
  file-first-line = '1';
  file-briefdesc  = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
  file-documentation = <<_EnD_oF_dEf_TeXt_

_EnD_oF_dEf_TeXt_;
}; /* file */
